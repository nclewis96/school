
README file for Programming Assignment 1
========================================

Your directory should now contain the following files:

 Makefile -> [course dir]/assignments/PA1/Makefile
 README
 atoi.cl -> [course dir]/assignments/PA1/atoi.cl
 stack.cl
 stack.test -> [course dir]/assignments/PA1/stack.test

	The Makefile contains targets for compiling and running your
	program, as well as handing it in.

	The README contains this info. Part of the assignment is to
	answer the questions at the end of this README file.
	Just edit this file.

	atoi.cl is an implementation in Cool of the string to integer
	conversion function known from the C language.

	stack.cl is the skeleton file which you should fill in with
	your program.

	stack.test is a short test input to the stack machine. It is
	run through your program when you hand it in, and the output
	is also	handed in.


        The symlinked files (see "man ln") are that way to emphasize
        that they are read-only -- when we test your program, we already
        have our own versions.


Instructions
------------

	To compile and run your program, type:

	% gmake test

        Try it now -- it should work, and print "Nothing implemented"
        (among a few other things).


        To simply compile your program, type

        % gmake compile


	Instructions for turning in the assignment will be posted on the
	course web page.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Questions on PA1
----------------

1. Describe your implementation of the stack machine in a single short
   paragraph.

	My implementation of the stack machine uses a string to store the stack. This string 
	allows for easy display of the full stack, and straightforward implementation of
	most of the methods needed. The pop() method returns the top (first) character in the 
	stack, the push() method puts the newest character at the top (first) spot of the stack.
	Peek() simply returns the top character of the stack, without interacting with it in
	any significant sense, while swap() switches the positions of the first and second 
	values in the stack. Display() outputs the current stack to the console, and eval() 
	calls on other methods of the stack machine depending on what the top value of the 
	stack currently is. Add() pops the first value (+), then takes the next two values 
	off the stack, adds them together, and pushes the sum onto the stack.

2. List 3 things that you like about the Cool programming language.
	Variable definitions straight forward
	Assigning a value to a variable
	Method/Class definitions are short and simple
	

3. List 3 things you DON'T like about Cool.
	Uses semicolons differently from most other languages
	Lack of for loops
	needing to end if/case/loops with fi/esac/pool
